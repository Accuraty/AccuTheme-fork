@using DotNetNuke.Web.DDRMenu;
@using System.Dynamic;
@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>
@{ var root = Model.Source.root; }

@helper RenderNodes(IList<MenuNode> nodes) {
  if (nodes.Count > 0) {
    <ul class='@(nodes[0].Depth == 0 ? "navbar-nav mr-auto" : "")'>
      @foreach (var node in nodes) {
        var cssClasses = new List<string>();
        cssClasses.Add("nav-item");
        cssClasses.Add("tab-" + node.TabId);
        if (node.HasChildren()) { cssClasses.Add("dropdown"); }
        if (node.Breadcrumb) { cssClasses.Add("active"); }
        var classString = new HtmlString((cssClasses.Count == 0) ? "" : (" class=\"" + String.Join(" ", cssClasses.ToArray()) + "\""));
        <li @classString>
          <a href='@(node.Enabled ? "@node.Url" : "#")' class='nav-link@(node.HasChildren() ? " dropdown-toggle" : "")' id="tab-@node.TabId-dropdown" @(node.HasChildren() ? "data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'" : "")>@node.Text</a>
          @RenderChildren(node.Children)
        </li>
      }
    </ul>
  }
}

@helper RenderChildren(IList<MenuNode> children) {
  if (children.Count > 0) {
    <div class="dropdown-menu" aria-labelledby="">
      @foreach (var child in children) {
        var cssClasses = new List<string>();
        cssClasses.Add("dropdown-item");
        if (child.Breadcrumb) { cssClasses.Add("active"); }
        var classString = new HtmlString((cssClasses.Count == 0) ? "" : (" class=\"" + String.Join(" ", cssClasses.ToArray()) + "\""));
        <a @classString target="@(child.Target)">@node.Text</a>
      }
    </div>
  }
}

@RenderNodes(root.Children)
