@{
  //
  // Sidebar Menu
  // ============
  //
  // Build a multi-level navigation menu by getting the children of the current
  // tab and displaying information for each child (and grandchild) page.
  // --------------------------------------------------------------------------
}


@using DotNetNuke.Entities.Tabs
@using DotNetNuke.Security.Permissions

@{
  TabInfo activeTab = Dnn.Tab;
  TabInfo activeTabParent = new TabInfo();
  TabInfo activeTabGrandParent = new TabInfo();

  int activeTabLevel = activeTab.Level;
  int activeTabId = activeTab.TabID;

  string menuTitle = activeTab.TabName;

  switch(activeTabLevel) {
    case 0:
      // `activeTabId` is properly assigned
      break;

    case 1:
      activeTabId = activeTab.ParentId;
      activeTabParent = TabController.Instance.GetTab(activeTab.ParentId, Dnn.Portal.PortalId);
      menuTitle = activeTabParent.TabName;
      break;

    case 2:
      activeTabParent = TabController.Instance.GetTab(activeTab.ParentId, Dnn.Portal.PortalId);
      activeTabGrandParent = TabController.Instance.GetTab(activeTabParent.ParentId, Dnn.Portal.PortalId);
      activeTabId = activeTabParent.ParentId;
      menuTitle = activeTabGrandParent.TabName;
      break;

    case 3:
      activeTabParent = TabController.Instance.GetTab(activeTab.ParentId, Dnn.Portal.PortalId);
      activeTabGrandParent = TabController.Instance.GetTab(activeTabParent.ParentId, Dnn.Portal.PortalId);
      activeTabId = activeTabGrandParent.ParentId;
      break;

    default:
      activeTabId = -1;
      break;
  }

  List<TabInfo> tabs = TabController.GetTabsByParent(activeTabId, Dnn.Portal.PortalId);
}


@if (tabs.Any()) {
  <div class="menu__label">@menuTitle</div>
  @RenderTabs(tabs)
}


@helper RenderTabs(List<TabInfo> tabs) {
  if (tabs.Count > 0) {
    <ul class="menu__list">
      @foreach (var tab in tabs) {
        List<string> userRoles = Dnn.User.Roles.ToList();
        IEnumerable<string> tabRoles = tab.TabPermissions.ToList().Select(p => p.RoleName);

        // Only include tabs in the menu if they meet these conditions.
        if (!tab.IsDeleted && tab.IsVisible && (userRoles.Any(r => tabRoles.Contains(r)) || tabRoles.Contains("All Users") || Dnn.User.IsSuperUser)) {

          var itemClasses = new List<string>();
          itemClasses.Add("menu__item");
          itemClasses.Add("tab-" + tab.TabID);
          if (tab.TabID == Dnn.Tab.TabID) { itemClasses.Add("active"); }

          var itemCss = new HtmlString((itemClasses.Count == 0) ? "" : (" class=\"" + String.Join(" ", itemClasses.ToArray()) + "\""));

          var linkClasses = new List<string>();
          linkClasses.Add("menu__link");
          if (tab.TabID == Dnn.Tab.TabID) { linkClasses.Add("active"); }
          var linkCss = new HtmlString((linkClasses.Count == 0) ? "" : (" class=\"" + String.Join(" ", linkClasses.ToArray()) + "\""));

          <li @itemCss>
            <div class="menu__item__header">
              @if (tab.HasChildren) {
                <a class="menu__toggle">
                  <span class="menu__toggle__icon">
                    <svg class="svg is-icon">
                      <use xlink:href="#icon-chevron-down" />
                    </svg>
                  </span>
                </a>
              }
              <a href="@tab.FullUrl" @linkCss>@tab.TabName</a>
            </div>
            @RenderChildren(tab)
          </li>
        }
      }
    </ul>
  }
}


@helper RenderChildren(TabInfo tab) {
  List<TabInfo> children = TabController.GetTabsByParent(tab.TabID, Dnn.Portal.PortalId);

  @RenderTabs(children);
}
