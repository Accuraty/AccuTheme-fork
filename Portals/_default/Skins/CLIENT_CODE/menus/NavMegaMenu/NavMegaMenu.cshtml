@using DotNetNuke.Web.DDRMenu;
@using System.Dynamic;
@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>
@{ var root = Model.Source.root; }

@helper RenderMegaMenu(IList<MenuNode> nodes) {
  if (nodes.Count > 0) {
    <ul class="navbar-nav ml-auto  mega-menu">
      @foreach (var node in nodes) {
        var HasChildren = node.HasChildren();

        var navItemClasses = new List<string>();
        navItemClasses.Add("nav-item");
        if (HasChildren) { navItemClasses.Add("mega-menu__item"); }
        navItemClasses.Add("tab-" + node.TabId);
        if (node.Breadcrumb) { navItemClasses.Add("active"); }

        var navItemCss = new HtmlString((navItemClasses.Count == 0) ? "" : ("class=\"" + String.Join(" ", navItemClasses.ToArray()) + "\""));
        <li @navItemCss>
          <a
            href='@(node.Enabled ? node.Url : "#")'
            class='nav-link'
            @{
              if (HasChildren) {
                <text>id="tab-@node.TabId-dropdown"</text>
                <text>data-toggle="dropdown"</text>
                <text>aria-haspopup="true"</text>
                <text>aria-expanded="false"</text>
              }
            }
          >@node.Text</a>
          @RenderSubmenu(node)
        </li>
      }
    </ul>
  }
}

@helper RenderSubmenu(MenuNode node) {
  var children = node.Children;
  if (children.Count > 0) {
    <ul class="mega-menu__dropdown" aria-labelledby="tab-@node.TabId-dropdown">
      @foreach (var child in children) {
        var HasChildren = child.HasChildren();
        var HasIcon = !String.IsNullOrEmpty(child.Icon);

        var itemClasses = new List<string>();
        itemClasses.Add("tab-" + child.TabId);
        itemClasses.Add("mega-menu__submenu");

        var itemCss = new HtmlString((itemClasses.Count == 0) ? "" : (" class=\"" + String.Join(" ", itemClasses.ToArray()) + "\""));

        var linkClasses = new List<string>();
        linkClasses.Add("mega-menu__link");
        linkClasses.Add("mega-menu__submenu__header");
        if (child.Breadcrumb) { linkClasses.Add("active"); }

        var linkCss = new HtmlString((linkClasses.Count == 0) ? "" : (" class=\"" + String.Join(" ", linkClasses.ToArray()) + "\""));
        <li @itemCss>
          <a @linkCss href='@(child.Enabled ? child.Url : "#")' target="@(child.Target)">
            <img src='@(HasIcon ? child.Icon : "https://placehold.it/60x60")' alt="@(child.Text)" class="mega-menu__submenu__icon" />
            <span>@child.Text</span>
          </a>
          @RenderSubmenuList(child)
        </li>
      }
    </ul>
  }
}

@helper RenderSubmenuList(MenuNode node) {
  var grandchildren = node.Children;
  if (grandchildren.Count > 0) {
    <ul class="mega-menu__submenu__list">
      @foreach (var grandchild in grandchildren) {
        var linkClasses = new List<string>();
        linkClasses.Add("mega-menu__link");
        if (grandchild.Breadcrumb) { linkClasses.Add("active"); }

        var linkCss = new HtmlString((linkClasses.Count == 0) ? "" : (" class=\"" + String.Join(" ", linkClasses.ToArray()) + "\""));
        <li>
          <a @linkCss href='@(grandchild.Enabled ? grandchild.Url : "#")' target="@(grandchild.Target)">@grandchild.Text</a>
        </li>
      }
    </ul>
  } else {
    var HasDescription = !String.IsNullOrEmpty(node.Description);

    <p class="mega-menu__submenu__description">@(HasDescription ? node.Description : "This is the tab description...")</p>

  }
}

@RenderMegaMenu(root.Children)
